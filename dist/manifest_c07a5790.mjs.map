{"version":3,"file":"manifest_c07a5790.mjs","sources":["../node_modules/astro/dist/core/logger/core.js","../node_modules/astro/dist/core/endpoint/index.js","../node_modules/astro/dist/core/routing/manifest/generator.js","../node_modules/astro/dist/core/routing/manifest/serialization.js","../node_modules/astro/dist/core/app/common.js"],"sourcesContent":["import { dim } from \"kleur/colors\";\nimport stringWidth from \"string-width\";\nconst dateTimeFormat = new Intl.DateTimeFormat([], {\n  hour: \"2-digit\",\n  minute: \"2-digit\",\n  second: \"2-digit\"\n});\nconst levels = {\n  debug: 20,\n  info: 30,\n  warn: 40,\n  error: 50,\n  silent: 90\n};\nfunction log(opts, level, label, message) {\n  const logLevel = opts.level;\n  const dest = opts.dest;\n  const event = {\n    label,\n    level,\n    message\n  };\n  if (levels[logLevel] > levels[level]) {\n    return;\n  }\n  dest.write(event);\n}\nfunction info(opts, label, message) {\n  return log(opts, \"info\", label, message);\n}\nfunction warn(opts, label, message) {\n  return log(opts, \"warn\", label, message);\n}\nfunction error(opts, label, message) {\n  return log(opts, \"error\", label, message);\n}\nfunction table(opts, columns) {\n  return function logTable(logFn, ...input) {\n    const message = columns.map((len, i) => padStr(input[i].toString(), len)).join(\" \");\n    logFn(opts, null, message);\n  };\n}\nfunction debug(...args) {\n  if (\"_astroGlobalDebug\" in globalThis) {\n    globalThis._astroGlobalDebug(...args);\n  }\n}\nfunction padStr(str, len) {\n  const strLen = stringWidth(str);\n  if (strLen > len) {\n    return str.substring(0, len - 3) + \"...\";\n  }\n  const spaces = Array.from({ length: len - strLen }, () => \" \").join(\"\");\n  return str + spaces;\n}\nlet defaultLogLevel;\nif (typeof process !== \"undefined\") {\n  let proc = process;\n  if (\"argv\" in proc && Array.isArray(proc.argv)) {\n    if (proc.argv.includes(\"--verbose\")) {\n      defaultLogLevel = \"debug\";\n    } else if (proc.argv.includes(\"--silent\")) {\n      defaultLogLevel = \"silent\";\n    } else {\n      defaultLogLevel = \"info\";\n    }\n  } else {\n    defaultLogLevel = \"info\";\n  }\n} else {\n  defaultLogLevel = \"info\";\n}\nfunction timerMessage(message, startTime = Date.now()) {\n  let timeDiff = Date.now() - startTime;\n  let timeDisplay = timeDiff < 750 ? `${Math.round(timeDiff)}ms` : `${(timeDiff / 1e3).toFixed(1)}s`;\n  return `${message}   ${dim(timeDisplay)}`;\n}\nclass Logger {\n  options;\n  constructor(options) {\n    this.options = options;\n  }\n  info(label, message) {\n    info(this.options, label, message);\n  }\n  warn(label, message) {\n    warn(this.options, label, message);\n  }\n  error(label, message) {\n    error(this.options, label, message);\n  }\n  debug(label, ...messages) {\n    debug(label, ...messages);\n  }\n  level() {\n    return this.options.level;\n  }\n  forkIntegrationLogger(label) {\n    return new AstroIntegrationLogger(this.options, label);\n  }\n}\nclass AstroIntegrationLogger {\n  options;\n  label;\n  constructor(logging, label) {\n    this.options = logging;\n    this.label = label;\n  }\n  /**\n   * Creates a new logger instance with a new label, but the same log options.\n   */\n  fork(label) {\n    return new AstroIntegrationLogger(this.options, label);\n  }\n  info(message) {\n    info(this.options, this.label, message);\n  }\n  warn(message) {\n    warn(this.options, this.label, message);\n  }\n  error(message) {\n    error(this.options, this.label, message);\n  }\n  debug(message) {\n    debug(this.label, message);\n  }\n}\nexport {\n  AstroIntegrationLogger,\n  Logger,\n  dateTimeFormat,\n  debug,\n  defaultLogLevel,\n  error,\n  info,\n  levels,\n  log,\n  table,\n  timerMessage,\n  warn\n};\n","import mime from \"mime\";\nimport { renderEndpoint } from \"../../runtime/server/index.js\";\nimport { ASTRO_VERSION } from \"../constants.js\";\nimport { AstroCookies, attachCookiesToResponse } from \"../cookies/index.js\";\nimport { AstroError, AstroErrorData } from \"../errors/index.js\";\nimport { callMiddleware } from \"../middleware/callMiddleware.js\";\nimport {\n  computeCurrentLocale,\n  computePreferredLocale,\n  computePreferredLocaleList\n} from \"../render/context.js\";\nimport {} from \"../render/index.js\";\nconst encoder = new TextEncoder();\nconst clientAddressSymbol = Symbol.for(\"astro.clientAddress\");\nconst clientLocalsSymbol = Symbol.for(\"astro.locals\");\nfunction createAPIContext({\n  request,\n  params,\n  site,\n  props,\n  adapterName,\n  locales,\n  routingStrategy,\n  defaultLocale\n}) {\n  let preferredLocale = void 0;\n  let preferredLocaleList = void 0;\n  let currentLocale = void 0;\n  const context = {\n    cookies: new AstroCookies(request),\n    request,\n    params,\n    site: site ? new URL(site) : void 0,\n    generator: `Astro v${ASTRO_VERSION}`,\n    props,\n    redirect(path, status) {\n      return new Response(null, {\n        status: status || 302,\n        headers: {\n          Location: path\n        }\n      });\n    },\n    ResponseWithEncoding,\n    get preferredLocale() {\n      if (preferredLocale) {\n        return preferredLocale;\n      }\n      if (locales) {\n        preferredLocale = computePreferredLocale(request, locales);\n        return preferredLocale;\n      }\n      return void 0;\n    },\n    get preferredLocaleList() {\n      if (preferredLocaleList) {\n        return preferredLocaleList;\n      }\n      if (locales) {\n        preferredLocaleList = computePreferredLocaleList(request, locales);\n        return preferredLocaleList;\n      }\n      return void 0;\n    },\n    get currentLocale() {\n      if (currentLocale) {\n        return currentLocale;\n      }\n      if (locales) {\n        currentLocale = computeCurrentLocale(request, locales, routingStrategy, defaultLocale);\n      }\n      return currentLocale;\n    },\n    url: new URL(request.url),\n    get clientAddress() {\n      if (clientAddressSymbol in request) {\n        return Reflect.get(request, clientAddressSymbol);\n      }\n      if (adapterName) {\n        throw new AstroError({\n          ...AstroErrorData.ClientAddressNotAvailable,\n          message: AstroErrorData.ClientAddressNotAvailable.message(adapterName)\n        });\n      } else {\n        throw new AstroError(AstroErrorData.StaticClientAddressNotAvailable);\n      }\n    },\n    get locals() {\n      let locals = Reflect.get(request, clientLocalsSymbol);\n      if (locals === void 0) {\n        locals = {};\n        Reflect.set(request, clientLocalsSymbol, locals);\n      }\n      if (typeof locals !== \"object\") {\n        throw new AstroError(AstroErrorData.LocalsNotAnObject);\n      }\n      return locals;\n    },\n    // We define a custom property, so we can check the value passed to locals\n    set locals(val) {\n      if (typeof val !== \"object\") {\n        throw new AstroError(AstroErrorData.LocalsNotAnObject);\n      } else {\n        Reflect.set(request, clientLocalsSymbol, val);\n      }\n    }\n  };\n  return context;\n}\nclass ResponseWithEncoding extends Response {\n  constructor(body, init, encoding) {\n    if (typeof body === \"string\") {\n      if (typeof Buffer !== \"undefined\" && Buffer.from) {\n        body = Buffer.from(body, encoding);\n      } else if (encoding == null || encoding === \"utf8\" || encoding === \"utf-8\") {\n        body = encoder.encode(body);\n      }\n    }\n    super(body, init);\n    if (encoding) {\n      this.headers.set(\"X-Astro-Encoding\", encoding);\n    }\n  }\n}\nasync function callEndpoint(mod, env, ctx, onRequest) {\n  const context = createAPIContext({\n    request: ctx.request,\n    params: ctx.params,\n    props: ctx.props,\n    site: env.site,\n    adapterName: env.adapterName,\n    routingStrategy: ctx.routing,\n    defaultLocale: ctx.defaultLocale,\n    locales: ctx.locales\n  });\n  let response;\n  if (onRequest) {\n    response = await callMiddleware(\n      env.logger,\n      onRequest,\n      context,\n      async () => {\n        return await renderEndpoint(mod, context, env.ssr, env.logger);\n      }\n    );\n  } else {\n    response = await renderEndpoint(mod, context, env.ssr, env.logger);\n  }\n  const isEndpointSSR = env.ssr && !ctx.route?.prerender;\n  if (response instanceof Response) {\n    if (isEndpointSSR && response.headers.get(\"X-Astro-Encoding\")) {\n      env.logger.warn(\n        \"ssr\",\n        \"`ResponseWithEncoding` is ignored in SSR. Please return an instance of Response. See https://docs.astro.build/en/core-concepts/endpoints/#server-endpoints-api-routes for more information.\"\n      );\n    }\n    attachCookiesToResponse(response, context.cookies);\n    return response;\n  }\n  env.logger.warn(\n    \"astro\",\n    `${ctx.route.component} returns a simple object which is deprecated. Please return an instance of Response. See https://docs.astro.build/en/core-concepts/endpoints/#server-endpoints-api-routes for more information.`\n  );\n  if (isEndpointSSR) {\n    if (response.hasOwnProperty(\"headers\")) {\n      env.logger.warn(\n        \"ssr\",\n        \"Setting headers is not supported when returning an object. Please return an instance of Response. See https://docs.astro.build/en/core-concepts/endpoints/#server-endpoints-api-routes for more information.\"\n      );\n    }\n    if (response.encoding) {\n      env.logger.warn(\n        \"ssr\",\n        \"`encoding` is ignored in SSR. To return a charset other than UTF-8, please return an instance of Response. See https://docs.astro.build/en/core-concepts/endpoints/#server-endpoints-api-routes for more information.\"\n      );\n    }\n  }\n  let body;\n  const headers = new Headers();\n  const pathname = ctx.route ? (\n    // Try the static route `pathname`\n    ctx.route.pathname ?? // Dynamic routes don't include `pathname`, so synthesize a path for these (e.g. 'src/pages/[slug].svg')\n    ctx.route.segments.map((s) => s.map((p) => p.content).join(\"\")).join(\"/\")\n  ) : (\n    // Fallback to pathname of the request\n    ctx.pathname\n  );\n  const mimeType = mime.getType(pathname) || \"text/plain\";\n  headers.set(\"Content-Type\", `${mimeType};charset=utf-8`);\n  if (response.encoding) {\n    headers.set(\"X-Astro-Encoding\", response.encoding);\n  }\n  if (response.body instanceof Uint8Array) {\n    body = response.body;\n    headers.set(\"Content-Length\", body.byteLength.toString());\n  } else if (typeof Buffer !== \"undefined\" && Buffer.from) {\n    body = Buffer.from(response.body, response.encoding);\n    headers.set(\"Content-Length\", body.byteLength.toString());\n  } else if (response.encoding == null || response.encoding === \"utf8\" || response.encoding === \"utf-8\") {\n    body = encoder.encode(response.body);\n    headers.set(\"Content-Length\", body.byteLength.toString());\n  } else {\n    body = response.body;\n  }\n  response = new Response(body, {\n    status: 200,\n    headers\n  });\n  attachCookiesToResponse(response, context.cookies);\n  return response;\n}\nexport {\n  ResponseWithEncoding,\n  callEndpoint,\n  createAPIContext\n};\n","import { compile } from \"path-to-regexp\";\nfunction getRouteGenerator(segments, addTrailingSlash) {\n  const template = segments.map((segment) => {\n    return \"/\" + segment.map((part) => {\n      if (part.spread) {\n        return `:${part.content.slice(3)}(.*)?`;\n      } else if (part.dynamic) {\n        return `:${part.content}`;\n      } else {\n        return part.content.normalize().replace(/\\?/g, \"%3F\").replace(/#/g, \"%23\").replace(/%5B/g, \"[\").replace(/%5D/g, \"]\").replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n      }\n    }).join(\"\");\n  }).join(\"\");\n  let trailing = \"\";\n  if (addTrailingSlash === \"always\" && segments.length) {\n    trailing = \"/\";\n  }\n  const toPath = compile(template + trailing);\n  return toPath;\n}\nexport {\n  getRouteGenerator\n};\n","import { getRouteGenerator } from \"./generator.js\";\nfunction serializeRouteData(routeData, trailingSlash) {\n  return {\n    ...routeData,\n    generate: void 0,\n    pattern: routeData.pattern.source,\n    redirectRoute: routeData.redirectRoute ? serializeRouteData(routeData.redirectRoute, trailingSlash) : void 0,\n    fallbackRoutes: routeData.fallbackRoutes.map((fallbackRoute) => {\n      return serializeRouteData(fallbackRoute, trailingSlash);\n    }),\n    _meta: { trailingSlash }\n  };\n}\nfunction deserializeRouteData(rawRouteData) {\n  return {\n    route: rawRouteData.route,\n    type: rawRouteData.type,\n    pattern: new RegExp(rawRouteData.pattern),\n    params: rawRouteData.params,\n    component: rawRouteData.component,\n    generate: getRouteGenerator(rawRouteData.segments, rawRouteData._meta.trailingSlash),\n    pathname: rawRouteData.pathname || void 0,\n    segments: rawRouteData.segments,\n    prerender: rawRouteData.prerender,\n    redirect: rawRouteData.redirect,\n    redirectRoute: rawRouteData.redirectRoute ? deserializeRouteData(rawRouteData.redirectRoute) : void 0,\n    fallbackRoutes: rawRouteData.fallbackRoutes.map((fallback) => {\n      return deserializeRouteData(fallback);\n    })\n  };\n}\nexport {\n  deserializeRouteData,\n  serializeRouteData\n};\n","import { deserializeRouteData } from \"../routing/manifest/serialization.js\";\nfunction deserializeManifest(serializedManifest) {\n  const routes = [];\n  for (const serializedRoute of serializedManifest.routes) {\n    routes.push({\n      ...serializedRoute,\n      routeData: deserializeRouteData(serializedRoute.routeData)\n    });\n    const route = serializedRoute;\n    route.routeData = deserializeRouteData(serializedRoute.routeData);\n  }\n  const assets = new Set(serializedManifest.assets);\n  const componentMetadata = new Map(serializedManifest.componentMetadata);\n  const clientDirectives = new Map(serializedManifest.clientDirectives);\n  return {\n    ...serializedManifest,\n    assets,\n    componentMetadata,\n    clientDirectives,\n    routes\n  };\n}\nexport {\n  deserializeManifest\n};\n"],"names":[],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}
