---
---

<div class="contact-modal" id="contactModal">
  <div class="modal-overlay"></div>
  <div class="modal-container">
    <div class="modal-header">
      <h2>Contactez-nous</h2>
      <button class="close-modal" id="closeModal">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>
    
    <div class="modal-body">
      <div class="contact-info">
        <div class="info-item">
          <div class="info-icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
            </svg>
          </div>
          <div>
            <h3>Téléphone</h3>
            <p>+33 (0)1 23 45 67 89</p>
          </div>
        </div>
        
        <div class="info-item">
          <div class="info-icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
              <polyline points="22,6 12,13 2,6"></polyline>
            </svg>
          </div>
          <div>
            <h3>Email</h3>
            <p>contact@aisolutions.fr</p>
          </div>
        </div>
        
        <div class="info-item">
          <div class="info-icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
              <circle cx="12" cy="10" r="3"></circle>
            </svg>
          </div>
          <div>
            <h3>Adresse</h3>
            <p>123 Avenue de l'Innovation<br>75008 Paris, France</p>
          </div>
        </div>
      </div>
      
      <form class="contact-form" id="contactForm">
        <div class="form-group">
          <label for="name">Nom complet</label>
          <input type="text" id="name" name="name" placeholder="Votre nom" required>
        </div>
        
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" name="email" placeholder="votre@email.com" required>
        </div>
        
        <div class="form-group">
          <label for="company">Entreprise</label>
          <input type="text" id="company" name="company" placeholder="Nom de votre entreprise">
        </div>
        
        <div class="form-group">
          <label for="subject">Sujet</label>
          <select id="subject" name="subject" required>
            <option value="" disabled selected>Sélectionnez un sujet</option>
            <option value="demo">Demande de démo</option>
            <option value="quote">Demande de devis</option>
            <option value="info">Renseignements</option>
            <option value="support">Support technique</option>
            <option value="other">Autre</option>
          </select>
        </div>
        
        <div class="form-group full-width">
          <label for="message">Message</label>
          <textarea id="message" name="message" placeholder="Comment pouvons-nous vous aider ?" rows="4" required></textarea>
        </div>
        
        <div class="form-group full-width checkbox-group">
          <input type="checkbox" id="consent" name="consent" required>
          <label for="consent">J'accepte que mes données soient traitées conformément à la <a href="#">politique de confidentialité</a>.</label>
        </div>
        
        <button type="submit" class="submit-button">
          <span class="button-text">Envoyer</span>
          <span class="button-icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="22" y1="2" x2="11" y2="13"></line>
              <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
            </svg>
          </span>
        </button>
      </form>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const contactModal = document.getElementById('contactModal');
    const closeModalBtn = document.getElementById('closeModal');
    const modalOverlay = document.querySelector('.modal-overlay');
    const contactForm = document.getElementById('contactForm');
    
    // Function to open modal
    function openModal() {
      contactModal.classList.add('active');
      document.body.style.overflow = 'hidden'; // Prevent scrolling
      
      // Add animation classes
      setTimeout(() => {
        contactModal.classList.add('animate-in');
      }, 10);
    }
    
    // Function to close modal
    function closeModal() {
      contactModal.classList.remove('animate-in');
      
      // Wait for animation to complete before hiding
      setTimeout(() => {
        contactModal.classList.remove('active');
        document.body.style.overflow = 'auto'; // Re-enable scrolling
      }, 300);
    }
    
    // Open modal when contact link is clicked
    document.querySelectorAll('.contact-link, .cta-button').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        openModal();
      });
    });
    
    // Close modal when close button is clicked
    closeModalBtn.addEventListener('click', closeModal);
    
    // Close modal when clicking outside
    modalOverlay.addEventListener('click', closeModal);
    
    // Prevent closing when clicking inside the modal content
    document.querySelector('.modal-container').addEventListener('click', (e) => {
      e.stopPropagation();
    });
    
    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && contactModal.classList.contains('active')) {
        closeModal();
      }
    });
    
    // Form submission
    contactForm.addEventListener('submit', (e) => {
      e.preventDefault();
      
      // Show loading state
      const submitButton = contactForm.querySelector('.submit-button');
      const buttonText = submitButton.querySelector('.button-text');
      const originalText = buttonText.textContent;
      
      submitButton.disabled = true;
      buttonText.textContent = 'Envoi en cours...';
      
      // Simulate form submission (replace with actual API call)
      setTimeout(() => {
        // Reset form
        contactForm.reset();
        
        // Show success message
        buttonText.textContent = 'Envoyé !';
        
        // Reset button after delay
        setTimeout(() => {
          buttonText.textContent = originalText;
          submitButton.disabled = false;
          
          // Close modal after success
          setTimeout(closeModal, 1000);
        }, 2000);
      }, 1500);
    });
    
    // Form validation and interactive feedback
    const formInputs = contactForm.querySelectorAll('input, textarea, select');
    
    formInputs.forEach(input => {
      // Add active class to labels when input is focused
      input.addEventListener('focus', () => {
        input.parentElement.classList.add('focused');
      });
      
      input.addEventListener('blur', () => {
        input.parentElement.classList.remove('focused');
        
        // Add filled class if input has value
        if (input.value.trim() !== '') {
          input.parentElement.classList.add('filled');
        } else {
          input.parentElement.classList.remove('filled');
        }
        
        // Validate on blur
        validateInput(input);
      });
      
      // Real-time validation for better UX
      input.addEventListener('input', () => {
        if (input.parentElement.classList.contains('error')) {
          validateInput(input);
        }
      });
    });
    
    // Input validation function
    function validateInput(input) {
      const formGroup = input.parentElement;
      
      // Reset error state
      formGroup.classList.remove('error');
      
      // Skip validation if input is empty (will be caught by required attribute)
      if (input.value.trim() === '') return;
      
      // Email validation
      if (input.type === 'email') {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(input.value)) {
          formGroup.classList.add('error');
          formGroup.setAttribute('data-error', 'Veuillez entrer une adresse email valide');
        }
      }
    }
  });
</script>

<style>
  /* Modal Base Styles */
  .contact-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2000;
    display: flex;
    justify-content: center;
    align-items: center;
    visibility: hidden;
    opacity: 0;
  }
  
  .contact-modal.active {
    visibility: visible;
    opacity: 1;
  }
  
  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(5px);
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .modal-container {
    position: relative;
    width: 90%;
    max-width: 1000px;
    max-height: 90vh;
    background: white;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 15px 50px rgba(0, 0, 0, 0.3);
    transform: scale(0.9);
    opacity: 0;
    transition: transform 0.3s ease, opacity 0.3s ease;
    display: flex;
    flex-direction: column;
  }
  
  /* Animation classes */
  .contact-modal.animate-in .modal-overlay {
    opacity: 1;
  }
  
  .contact-modal.animate-in .modal-container {
    transform: scale(1);
    opacity: 1;
  }
  
  /* Modal Header */
  .modal-header {
    padding: 1.5rem 2rem;
    background: var(--accent-gradient);
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .modal-header h2 {
    margin: 0;
    font-size: 1.8rem;
    font-weight: 600;
  }
  
  .close-modal {
    background: transparent;
    border: none;
    color: white;
    width: 30px;
    height: 30px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.3s ease;
  }
  
  .close-modal:hover {
    transform: rotate(90deg);
  }
  
  .close-modal svg {
    width: 24px;
    height: 24px;
  }
  
  /* Modal Body */
  .modal-body {
    padding: 2rem;
    overflow-y: auto;
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 2rem;
  }
  
  /* Contact Info Section */
  .contact-info {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .info-item {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
  }
  
  .info-icon {
    width: 40px;
    height: 40px;
    min-width: 40px;
    background: linear-gradient(135deg, rgba(58, 123, 213, 0.1), rgba(0, 210, 255, 0.1));
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--primary-color);
  }
  
  .info-icon svg {
    width: 20px;
    height: 20px;
    stroke: url(#gradient);
  }
  
  .info-item h3 {
    margin: 0 0 0.3rem 0;
    font-size: 1.1rem;
    color: var(--text-color);
  }
  
  .info-item p {
    margin: 0;
    color: #666;
    line-height: 1.5;
  }
  
  /* Contact Form */
  .contact-form {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
  }
  
  .form-group {
    position: relative;
  }
  
  .form-group.full-width {
    grid-column: 1 / -1;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--text-color);
    transition: color 0.3s ease;
  }
  
  .form-group.focused label {
    color: var(--primary-color);
  }
  
  .form-group input,
  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: 0.8rem 1rem;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1rem;
    font-family: inherit;
    background: #f9f9f9;
    transition: all 0.3s ease;
  }
  
  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--primary-color);
    background: white;
    box-shadow: 0 0 0 3px rgba(58, 123, 213, 0.1);
  }
  
  .form-group.error input,
  .form-group.error select,
  .form-group.error textarea {
    border-color: #e74c3c;
    background: rgba(231, 76, 60, 0.05);
  }
  
  .form-group.error::after {
    content: attr(data-error);
    position: absolute;
    bottom: -1.2rem;
    left: 0;
    font-size: 0.8rem;
    color: #e74c3c;
  }
  
  /* Checkbox styling */
  .checkbox-group {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
  }
  
  .checkbox-group input {
    width: auto;
    margin-top: 0.3rem;
  }
  
  .checkbox-group label {
    margin: 0;
    font-size: 0.85rem;
    line-height: 1.4;
  }
  
  .checkbox-group a {
    color: var(--primary-color);
    text-decoration: none;
  }
  
  .checkbox-group a:hover {
    text-decoration: underline;
  }
  
  /* Submit button */
  .submit-button {
    grid-column: 1 / -1;
    justify-self: center;
    background: var(--accent-gradient);
    color: white;
    border: none;
    border-radius: 50px;
    padding: 0.8rem 2.5rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 1rem;
  }
  
  .submit-button:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(58, 123, 213, 0.3);
  }
  
  .submit-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }
  
  .button-icon {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .button-icon svg {
    width: 16px;
    height: 16px;
    transition: transform 0.3s ease;
  }
  
  .submit-button:hover .button-icon svg {
    transform: translateX(3px);
  }
  
  /* Responsive styles */
  @media (max-width: 768px) {
    .modal-body {
      grid-template-columns: 1fr;
      padding: 1.5rem;
    }
    
    .contact-form {
      grid-template-columns: 1fr;
    }
    
    .modal-header {
      padding: 1rem 1.5rem;
    }
    
    .modal-header h2 {
      font-size: 1.5rem;
    }
  }
</style>

<!-- SVG gradient definition for icons -->
<svg width="0" height="0" style="position: absolute;">
  <defs>
    <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#3a7bd5" />
      <stop offset="100%" stop-color="#00d2ff" />
    </linearGradient>
  </defs>
</svg>
