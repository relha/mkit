---
---

<section class="demo-section" id="demo">
  <div class="demo-container">
    <h2 class="section-title">Essayez notre IA</h2>
    
    <div class="demo-content">
      <div class="demo-info">
        <h3>Découvrez la puissance de notre IA</h3>
        <p>Notre assistant IA peut automatiser vos tâches quotidiennes, répondre à vos questions et vous aider à prendre de meilleures décisions. Essayez-le maintenant et voyez par vous-même comment il peut transformer votre entreprise.</p>
        
        <div class="demo-features">
          <div class="feature">
            <div class="feature-icon">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
              </svg>
            </div>
            <div class="feature-text">
              <h4>Conversation naturelle</h4>
              <p>Interagissez comme avec un humain</p>
            </div>
          </div>
          
          <div class="feature">
            <div class="feature-icon">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>
              </svg>
            </div>
            <div class="feature-text">
              <h4>Analyse intelligente</h4>
              <p>Obtenez des insights pertinents</p>
            </div>
          </div>
          
          <div class="feature">
            <div class="feature-icon">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                <line x1="8" y1="21" x2="16" y2="21"></line>
                <line x1="12" y1="17" x2="12" y2="21"></line>
              </svg>
            </div>
            <div class="feature-text">
              <h4>Multi-plateforme</h4>
              <p>Utilisable sur tous vos appareils</p>
            </div>
          </div>
        </div>
      </div>
      
      <div class="chatbot-container">
        <div class="chatbot-header">
          <div class="chatbot-title">Assistant IA</div>
          <div class="chatbot-status">En ligne</div>
        </div>
        
        <div class="chat-messages" id="chatMessages">
          <div class="message bot">
            <div class="message-content">
              Bonjour ! Je suis votre assistant IA. Comment puis-je vous aider aujourd'hui ?
            </div>
            <div class="message-time">Maintenant</div>
          </div>
        </div>
        
        <div class="chat-input">
          <input type="text" id="userInput" placeholder="Posez votre question..." />
          <button id="sendButton">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="22" y1="2" x2="11" y2="13"></line>
              <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const chatMessages = document.getElementById('chatMessages');
    const userInput = document.getElementById('userInput');
    const sendButton = document.getElementById('sendButton');
    
    // Sample responses based on keywords
    const responses = {
      default: "Je suis désolé, je n'ai pas compris votre question. Pourriez-vous reformuler ou me demander autre chose ?",
      greeting: ["Bonjour !", "Salut ! Comment puis-je vous aider ?", "Bonjour, ravi de vous rencontrer !"],
      pricing: "Nos tarifs commencent à 99€/mois pour l'offre Starter. L'offre Business est à 249€/mois et nous proposons également des solutions Enterprise sur mesure.",
      features: "Notre IA peut automatiser vos tâches administratives, analyser vos données, générer des rapports, et bien plus encore. Que souhaitez-vous automatiser en particulier ?",
      demo: "Vous êtes en train d'utiliser notre démo ! N'hésitez pas à me poser des questions sur nos services, tarifs ou fonctionnalités.",
      contact: "Vous pouvez nous contacter par email à contact@aisolutions.fr ou par téléphone au 01 23 45 67 89. Un conseiller vous répondra dans les 24h.",
      thanks: ["De rien !", "Avec plaisir !", "Je vous en prie, n'hésitez pas si vous avez d'autres questions."],
      help: "Je peux vous renseigner sur nos services, nos tarifs, nos fonctionnalités ou vous mettre en relation avec un conseiller. Que souhaitez-vous savoir ?"
    };
    
    // Keywords mapping
    const keywords = {
      greeting: ["bonjour", "salut", "hello", "coucou", "hey"],
      pricing: ["prix", "tarif", "coût", "combien", "offre", "forfait"],
      features: ["fonctionnalité", "service", "option", "capable", "faire", "possible"],
      demo: ["démo", "essai", "tester", "exemple"],
      contact: ["contact", "email", "téléphone", "appeler", "joindre"],
      thanks: ["merci", "thanks", "remercie"],
      help: ["aide", "help", "besoin", "comment"]
    };
    
    // Function to add a message to the chat
    function addMessage(text, isUser = false) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${isUser ? 'user' : 'bot'}`;
      
      const contentDiv = document.createElement('div');
      contentDiv.className = 'message-content';
      contentDiv.textContent = text;
      
      const timeDiv = document.createElement('div');
      timeDiv.className = 'message-time';
      timeDiv.textContent = 'Maintenant';
      
      messageDiv.appendChild(contentDiv);
      messageDiv.appendChild(timeDiv);
      
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
      
      // Add typing animation for bot messages
      if (!isUser) {
        contentDiv.style.opacity = '0';
        let opacity = 0;
        const interval = setInterval(() => {
          opacity += 0.1;
          contentDiv.style.opacity = opacity;
          if (opacity >= 1) clearInterval(interval);
        }, 50);
      }
    }
    
    // Function to get bot response based on user input
    function getBotResponse(input) {
      const text = input.toLowerCase();
      
      // Check for keywords
      for (const [intent, keywordList] of Object.entries(keywords)) {
        for (const keyword of keywordList) {
          if (text.includes(keyword)) {
            const response = responses[intent];
            // If response is an array, pick a random one
            return Array.isArray(response) 
              ? response[Math.floor(Math.random() * response.length)] 
              : response;
          }
        }
      }
      
      return responses.default;
    }
    
    // Handle send button click
    sendButton.addEventListener('click', () => {
      const text = userInput.value.trim();
      if (text) {
        addMessage(text, true);
        userInput.value = '';
        
        // Simulate typing delay
        setTimeout(() => {
          const botResponse = getBotResponse(text);
          addMessage(botResponse);
        }, 1000);
      }
    });
    
    // Handle enter key press
    userInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        sendButton.click();
      }
    });
    
    // Focus input on load
    userInput.focus();
    
    // Animate features on scroll
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });
    
    // Observe demo content
    observer.observe(document.querySelector('.demo-content'));
    
    // Observe each feature with delay
    document.querySelectorAll('.feature').forEach((feature, index) => {
      feature.style.transitionDelay = `${index * 0.2}s`;
      observer.observe(feature);
    });
  });
</script>

<style>
  .demo-section {
    padding: 6rem 2rem;
    background-color: #f9f9f9;
  }
  
  .demo-container {
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .section-title {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 3rem;
    color: var(--text-color);
    position: relative;
  }
  
  .section-title::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: var(--accent-gradient);
    border-radius: 2px;
  }
  
  .demo-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }
  
  .demo-content.visible {
    opacity: 1;
    transform: translateY(0);
  }
  
  .demo-info {
    padding-right: 2rem;
  }
  
  .demo-info h3 {
    font-size: 2rem;
    margin-bottom: 1.5rem;
    color: var(--text-color);
  }
  
  .demo-info p {
    color: #666;
    line-height: 1.6;
    margin-bottom: 2rem;
  }
  
  .demo-features {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .feature {
    display: flex;
    align-items: center;
    opacity: 0;
    transform: translateX(-20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }
  
  .feature.visible {
    opacity: 1;
    transform: translateX(0);
  }
  
  .feature-icon {
    width: 40px;
    height: 40px;
    margin-right: 1rem;
    color: var(--primary-color);
  }
  
  .feature-icon svg {
    width: 100%;
    height: 100%;
    stroke: url(#gradient);
  }
  
  .feature-text h4 {
    font-size: 1.2rem;
    margin-bottom: 0.3rem;
    color: var(--text-color);
  }
  
  .feature-text p {
    color: #666;
    margin-bottom: 0;
    font-size: 0.9rem;
  }
  
  /* Chatbot styles */
  .chatbot-container {
    background: white;
    border-radius: 10px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    height: 500px;
  }
  
  .chatbot-header {
    background: var(--accent-gradient);
    color: white;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .chatbot-title {
    font-weight: 600;
    font-size: 1.1rem;
  }
  
  .chatbot-status {
    font-size: 0.8rem;
    display: flex;
    align-items: center;
  }
  
  .chatbot-status::before {
    content: '';
    display: inline-block;
    width: 8px;
    height: 8px;
    background: #4CAF50;
    border-radius: 50%;
    margin-right: 5px;
  }
  
  .chat-messages {
    flex: 1;
    padding: 1rem;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .message {
    max-width: 80%;
    padding: 0.8rem 1rem;
    border-radius: 10px;
    position: relative;
  }
  
  .message.bot {
    align-self: flex-start;
    background: #f0f0f0;
    border-bottom-left-radius: 0;
  }
  
  .message.user {
    align-self: flex-end;
    background: var(--primary-color);
    color: white;
    border-bottom-right-radius: 0;
  }
  
  .message-content {
    margin-bottom: 0.3rem;
  }
  
  .message-time {
    font-size: 0.7rem;
    opacity: 0.7;
    text-align: right;
  }
  
  .chat-input {
    display: flex;
    padding: 1rem;
    border-top: 1px solid #eaeaea;
  }
  
  .chat-input input {
    flex: 1;
    padding: 0.8rem 1rem;
    border: 1px solid #eaeaea;
    border-radius: 30px;
    font-size: 0.9rem;
    outline: none;
    transition: border-color 0.3s ease;
  }
  
  .chat-input input:focus {
    border-color: var(--primary-color);
  }
  
  .chat-input button {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: var(--accent-gradient);
    border: none;
    margin-left: 0.5rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.3s ease;
  }
  
  .chat-input button:hover {
    transform: scale(1.1);
  }
  
  .chat-input button svg {
    width: 20px;
    height: 20px;
    stroke: white;
  }
  
  @media (max-width: 768px) {
    .demo-section {
      padding: 4rem 1.5rem;
    }
    
    .section-title {
      font-size: 2rem;
    }
    
    .demo-content {
      grid-template-columns: 1fr;
    }
    
    .demo-info {
      padding-right: 0;
    }
    
    .chatbot-container {
      height: 400px;
    }
  }
</style>
