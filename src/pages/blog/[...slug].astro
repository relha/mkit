---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import ContactModal from '../../components/ContactModal.astro';
import Navbar from '../../components/Navbar.astro';

// G√©n√®re les pages pour chaque article
export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Formatage de la date
const formattedDate = new Intl.DateTimeFormat('fr-FR', {
  day: 'numeric',
  month: 'long',
  year: 'numeric'
}).format(entry.data.pubDate);
---

<Layout title={`${entry.data.title} | Solutions IA pour PME`}>
  <meta name="description" content={entry.data.description} slot="head" />
  <meta property="og:title" content={entry.data.title} slot="head" />
  <meta property="og:description" content={entry.data.description} slot="head" />
  <meta property="og:type" content="article" slot="head" />
  <meta property="article:published_time" content={entry.data.pubDate.toISOString()} slot="head" />
  {entry.data.tags.map(tag => (
    <meta property="article:tag" content={tag} slot="head" />
  ))}

  <Navbar />
  
  <main class="blog-article">
    <div class="container">
      <article>
        <div class="hero-image">
          <img src={entry.data.image} alt={entry.data.title} />
        </div>
        <header>
          <div class="article-meta">
            <time datetime={entry.data.pubDate.toISOString()}>{formattedDate}</time>
            <div class="tags">
              {entry.data.tags.map(tag => (
                <a href={`/blog/tags/${tag.toLowerCase()}`} class="tag">#{tag}</a>
              ))}
            </div>
          </div>
          <h1>{entry.data.title}</h1>
          <p class="description">{entry.data.description}</p>
        </header>
        
        <div class="content">
          <Content />
        </div>
        
        <div class="cta-container">
          <div class="cta-box">
            <p>üëâ Vous souhaitez automatiser vos t√¢ches ? Contactez-nous pour une d√©mo gratuite !</p>
            <button id="contact-cta" class="btn">Demander une d√©mo</button>
          </div>
        </div>
      </article>
    </div>
  </main>
  
  <ContactModal />
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const contactButton = document.getElementById('contact-cta');
    
    contactButton.addEventListener('click', () => {
      // D√©clenche l'√©v√©nement personnalis√© pour ouvrir la modal de contact
      document.dispatchEvent(new CustomEvent('open-contact-modal'));
    });
  });
</script>

<style>
  .blog-article {
    padding: 2rem 0 4rem;
  }
  
  .container {
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }
  
  article {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    overflow: hidden;
  }
  
  .hero-image {
    width: 100%;
    height: 400px;
    overflow: hidden;
  }
  
  .hero-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  header {
    padding: 2rem 2rem 1rem;
  }
  
  .article-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  time {
    color: #666;
    font-size: 0.9rem;
  }
  
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .tag {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    background: var(--accent-gradient);
    color: white;
    border-radius: 50px;
    font-size: 0.8rem;
    font-weight: 500;
    transition: transform 0.2s ease;
  }
  
  .tag:hover {
    transform: translateY(-2px);
  }
  
  h1 {
    font-size: 2.5rem;
    line-height: 1.2;
    margin-bottom: 1rem;
    color: var(--text-color);
  }
  
  .description {
    font-size: 1.2rem;
    line-height: 1.5;
    color: #555;
    margin-bottom: 2rem;
  }
  
  .content {
    padding: 0 2rem 2rem;
    line-height: 1.7;
    color: var(--text-color);
  }
  
  /* Styles pour le contenu Markdown */
  .content :global(h2) {
    font-size: 1.8rem;
    margin: 2rem 0 1rem;
    color: var(--text-color);
  }
  
  .content :global(h3) {
    font-size: 1.5rem;
    margin: 1.8rem 0 0.8rem;
    color: var(--text-color);
  }
  
  .content :global(p) {
    margin-bottom: 1.5rem;
  }
  
  .content :global(ul), .content :global(ol) {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }
  
  .content :global(li) {
    margin-bottom: 0.5rem;
  }
  
  .content :global(blockquote) {
    border-left: 4px solid var(--primary-color);
    padding-left: 1rem;
    margin-left: 0;
    color: #555;
    font-style: italic;
    margin-bottom: 1.5rem;
  }
  
  .content :global(pre) {
    background-color: #f4f4f4;
    padding: 1rem;
    border-radius: 4px;
    overflow-x: auto;
    margin-bottom: 1.5rem;
  }
  
  .content :global(code) {
    font-family: 'Courier New', monospace;
    background-color: #f4f4f4;
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
    font-size: 0.9em;
  }
  
  .content :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 4px;
    margin: 1.5rem 0;
  }
  
  .content :global(a) {
    color: var(--primary-color);
    text-decoration: underline;
    transition: color 0.2s ease;
  }
  
  .content :global(a:hover) {
    color: var(--secondary-color);
  }
  
  .content :global(hr) {
    border: none;
    height: 1px;
    background-color: #ddd;
    margin: 2rem 0;
  }
  
  /* CTA Box */
  .cta-container {
    padding: 0 2rem 2rem;
  }
  
  .cta-box {
    background: linear-gradient(to right, #f8f9fa, #e9ecef);
    border-radius: 8px;
    padding: 1.5rem;
    text-align: center;
    border-left: 4px solid var(--primary-color);
  }
  
  .cta-box p {
    font-size: 1.1rem;
    margin-bottom: 1rem;
    font-weight: 500;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    h1 {
      font-size: 2rem;
    }
    
    .description {
      font-size: 1.1rem;
    }
    
    .article-meta {
      flex-direction: column;
      align-items: flex-start;
    }
    
    header, .content, .cta-container {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }
    
    .hero-image {
      height: 250px;
    }
  }
</style>
